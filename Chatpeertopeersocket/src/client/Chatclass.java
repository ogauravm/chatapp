/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import enums.Messagetype;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import message.Messageclass;

/**
 *
 * @author GAURAV
 */
public class Chatclass extends javax.swing.JFrame {
    
    private Socket socket;
    private ObjectOutputStream oos;
    private ObjectInputStream ois;
    private Messageclass inmsg,outmsg;
    private ArrayList<Byte>list;
    private Messagetype messagetype;
    private static String fileprefix="/home/gaurav/temp/";

    /**
     * Creates new form Chat
     */
    public Chatclass(Socket socket) throws IOException {
        this.socket = socket;
        outmsg = new Messageclass();
        outmsg.setMessagetype(Messagetype.TEXT);
        list = new ArrayList<Byte>();
       // oos = new ObjectOutputStream(socket.getOutputStream());
       // ois = new ObjectInputStream(socket.getInputStream()); 
        new Thread(new helperthread()).start();
        initComponents();
    }
    
    public Chatclass(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        msglist = new javax.swing.JTextArea();
        filechoosebutton = new javax.swing.JButton();
        jDesktopPane2 = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        send.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        msglist.setEditable(false);
        msglist.setColumns(20);
        msglist.setRows(5);
        jScrollPane2.setViewportView(msglist);

        filechoosebutton.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        filechoosebutton.setText("Choose File");
        filechoosebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechoosebuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filechoosebutton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filechoosebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class helperthread implements Runnable
    {
        @Override
        public void run()
        {
            try
            {  
                while(true)
                { 
                    ois = new ObjectInputStream(socket.getInputStream()); 
                    inmsg = (Messageclass) ois.readObject();

                   // System.out.println("Message recieved");
                    
                    System.out.println(inmsg.getMessagetype());

                    messagetype = inmsg.getMessagetype();

                    switch(messagetype)
                    {
                        case FILE : storeFile();
                                    break;
                        case TEXT : msglist.append("Mr.X : " + inmsg.getText() + "\n");
                                    break;
                        default   : break;
                    }
                }
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
                dispose();
            }
           
        }
        
        public void storeFile()throws Exception
        {
            String filepath = Chatclass.fileprefix + inmsg.getFilename();
            File file = new File(filepath);
            if(!file.exists())
                file.createNewFile();
          //  System.out.println("writing into file...");
            FileOutputStream fout = new FileOutputStream(filepath);
            
            ArrayList<Byte>bytelist = inmsg.getBytes();
            
            for(Byte x : bytelist)
                fout.write(x);
            
            fout.close();
            
            System.out.println("File path : " + filepath);
            
        }
    }
    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        try
        {
            
            messagetype = outmsg.getMessagetype();

            switch(messagetype)
            {
                case FILE : sendFile();
                            System.out.println("File");
                            break;
                case TEXT : msglist.append("Me : " + text.getText() + "\n");
                            sendText();
                            System.out.println("Text");
                            break;
                default : break;
            }
            outmsg.setMessagetype(Messagetype.TEXT);
            System.out.println("Message sent");
        
        }catch(Exception exception)
        {
            exception.printStackTrace();
        }   
        
            
        
    }//GEN-LAST:event_sendActionPerformed

    private void filechoosebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechoosebuttonActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        
        int response = filechooser.showOpenDialog(null); 
  
            // if the user selects a file 
            if (response == JFileChooser.APPROVE_OPTION) 
  
            { 
                // set the label to the path of the selected file 
                outmsg.setMessagetype(Messagetype.FILE);
                text.setText(filechooser.getSelectedFile().getAbsolutePath()); 
            } 
    }//GEN-LAST:event_filechoosebuttonActionPerformed

    
    public void sendFile()throws Exception
    {
        String filename = text.getText();
        System.out.println(filename);
        String file;
        int idx = filename.length()-1;
        while(filename.charAt(idx)!='/')
        {
            idx--;
        }
        
        file = filename.substring(idx+1);
        
        outmsg.setFilename(file);
        FileInputStream fin = new FileInputStream(text.getText());
        
        int temp;
        while((temp = fin.read())!=-1)
        {
            list.add((byte)temp);
        }
       
        outmsg.setBytes(list);
       
        send();
    }
    
    public void sendText()throws Exception
    {
        outmsg.setText(text.getText());
        
        send();
    }
    
    public void send()
    {
        try
        {
            oos = new ObjectOutputStream(socket.getOutputStream());
            text.setText("");
            oos.writeObject(outmsg);
            oos.flush();
        }
        catch(Exception ex)
        {
            dispose();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chatclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chatclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chatclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chatclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chatclass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filechoosebutton;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea msglist;
    private javax.swing.JButton send;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
